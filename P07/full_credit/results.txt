FULL CREDIT
===========

QUESTION 1: Why is String[] args changed to a LinkedList in WordSearch.main? (Hint: Examine the WordSearch constructor!)


In the WordSearch class, String[] args is converted to a LinkedList in the main method using Arrays.asList(args). This conversion allows easier manipulation of the arguments and passing them to the WordSearch constructor, which takes a List<String> as a parameter.





QUESTION 2: How many puzzles did your machine need to solve with 1 thread to run for between 30 and 45 seconds: 


1000 puzzles with 1 threads
Thread 0: 0-999
java WordSearch 1 1000 ../puzzle??.txt  37.43s user 0.27s system 101% cpu 37.210 total




QUESTION 3: Provide the output of 

    time java WordSearch n 1000 ../puzzle??.txt 

where n is 1 to 16 and 1000 is the number of puzzles specified in Question 2. NOTE: You can run all of these with a single bash command if you like (again, replace 1000 with your number of puzzles from Question 2):

for i in {1..16} ; do time java WordSearch $i 1000 ../puzzle??.txt ; done

Example Timing:

 for i in {1..16} ; do time java WordSearch $i 1000 ../puzzle??.txt ; done
1000 puzzles
Thread 0: 0-999

real	0m31.872s
user	0m32.475s
sys	0m0.224s

1000 puzzles
Thread 1: 500-999
Thread 0: 0-499

real	0m14.376s
user	0m29.078s
sys	0m0.229s

...and so on



YOUR Timing:


1000 puzzles with 1 threads
Thread 0: 0-999
java WordSearch $i 1000 ../puzzle??.txt  37.32s user 0.22s system 101% cpu 36.977 total

1000 puzzles with 2 threads
Thread 0: 0-499
Thread 1: 500-999
java WordSearch $i 1000 ../puzzle??.txt  33.94s user 0.18s system 201% cpu 16.946 total

1000 puzzles with 3 threads
Thread 1: 334-667
Thread 2: 668-999
Thread 0: 0-333
java WordSearch $i 1000 ../puzzle??.txt  41.97s user 0.29s system 298% cpu 14.178 total

1000 puzzles with 4 threads
Thread 2: 500-749
Thread 3: 750-999
Thread 0: 0-249
Thread 1: 250-499
java WordSearch $i 1000 ../puzzle??.txt  46.52s user 0.34s system 393% cpu 11.922 total

1000 puzzles with 5 threads
Thread 2: 400-599
Thread 4: 800-999
Thread 3: 600-799
Thread 0: 0-199
Thread 1: 200-399
java WordSearch $i 1000 ../puzzle??.txt  55.92s user 0.36s system 488% cpu 11.519 total

1000 puzzles with 6 threads
Thread 1: 167-333
Thread 2: 334-500
Thread 0: 0-166
Thread 4: 668-834
Thread 3: 501-667
Thread 5: 835-999
java WordSearch $i 1000 ../puzzle??.txt  51.63s user 0.47s system 510% cpu 10.200 total

1000 puzzles with 7 threads
Thread 3: 429-571
Thread 4: 572-714
Thread 5: 715-857
Thread 1: 143-285
Thread 6: 858-999
Thread 0: 0-142
Thread 2: 286-428
java WordSearch $i 1000 ../puzzle??.txt  62.08s user 0.59s system 530% cpu 11.816 total

1000 puzzles with 8 threads
Thread 4: 500-624
Thread 1: 125-249
Thread 0: 0-124
Thread 6: 750-874
Thread 7: 875-999
Thread 3: 375-499
Thread 2: 250-374
Thread 5: 625-749
java WordSearch $i 1000 ../puzzle??.txt  51.36s user 0.76s system 417% cpu 12.471 total

1000 puzzles with 9 threads
Thread 2: 224-335
Thread 8: 896-999
Thread 3: 336-447
Thread 4: 448-559
Thread 0: 0-111
Thread 7: 784-895
Thread 1: 112-223
Thread 6: 672-783
Thread 5: 560-671
java WordSearch $i 1000 ../puzzle??.txt  62.73s user 0.82s system 500% cpu 12.691 total

1000 puzzles with 10 threads
Thread 2: 200-299
Thread 8: 800-899
Thread 9: 900-999
Thread 1: 100-199
Thread 6: 600-699
Thread 5: 500-599
Thread 3: 300-399
Thread 4: 400-499
Thread 0: 0-99
Thread 7: 700-799
java WordSearch $i 1000 ../puzzle??.txt  54.92s user 0.65s system 494% cpu 11.241 total

1000 puzzles with 11 threads
Thread 10: 910-999
Thread 3: 273-363
Thread 4: 364-454
Thread 8: 728-818
Thread 2: 182-272
Thread 9: 819-909
Thread 1: 91-181
Thread 6: 546-636
Thread 0: 0-90
Thread 5: 455-545
Thread 7: 637-727
java WordSearch $i 1000 ../puzzle??.txt  62.79s user 0.85s system 449% cpu 14.165 total

1000 puzzles with 12 threads
Thread 6: 504-587
Thread 1: 84-167
Thread 3: 252-335
Thread 9: 756-839
Thread 7: 588-671
Thread 0: 0-83
Thread 11: 924-999
Thread 5: 420-503
Thread 8: 672-755
Thread 10: 840-923
Thread 2: 168-251
Thread 4: 336-419
java WordSearch $i 1000 ../puzzle??.txt  60.16s user 0.65s system 529% cpu 11.481 total

1000 puzzles with 13 threads
Thread 1: 77-153
Thread 10: 770-846
Thread 9: 693-769
Thread 12: 924-999
Thread 6: 462-538
Thread 7: 539-615
Thread 11: 847-923
Thread 4: 308-384
Thread 5: 385-461
Thread 0: 0-76
Thread 3: 231-307
Thread 8: 616-692
Thread 2: 154-230
java WordSearch $i 1000 ../puzzle??.txt  51.45s user 0.60s system 489% cpu 10.624 total

1000 puzzles with 14 threads
Thread 0: 0-71
Thread 10: 720-791
Thread 2: 144-215
Thread 7: 504-575
Thread 4: 288-359
Thread 9: 648-719
Thread 3: 216-287
Thread 5: 360-431
Thread 8: 576-647
Thread 6: 432-503
Thread 1: 72-143
Thread 11: 792-863
Thread 12: 864-935
Thread 13: 936-999
java WordSearch $i 1000 ../puzzle??.txt  63.01s user 0.95s system 479% cpu 13.350 total

1000 puzzles with 15 threads
Thread 11: 737-803
Thread 7: 469-535
Thread 1: 67-133
Thread 6: 402-468
Thread 2: 134-200
Thread 3: 201-267
Thread 9: 603-669
Thread 0: 0-66
Thread 8: 536-602
Thread 13: 871-937
Thread 10: 670-736
Thread 4: 268-334
Thread 14: 938-999
Thread 5: 335-401
Thread 12: 804-870
java WordSearch $i 1000 ../puzzle??.txt  58.25s user 0.67s system 541% cpu 10.883 total

1000 puzzles with 16 threads
Thread 4: 252-314
Thread 1: 63-125
Thread 8: 504-566
Thread 7: 441-503
Thread 13: 819-881
Thread 9: 567-629
Thread 6: 378-440
Thread 0: 0-62
Thread 12: 756-818
Thread 3: 189-251
Thread 14: 882-944
Thread 11: 693-755
Thread 15: 945-999
Thread 10: 630-692
Thread 2: 126-188
Thread 5: 315-377
java WordSearch $i 1000 ../puzzle??.txt  53.10s user 0.66s system 516% cpu 10.398 total





QUESTION 3: Does adding more threads continue to speed up the program? Do more threads ever slow down the program even slightly?  Why or why not?


1 thread: 37.32 seconds
2 threads: 33.94 seconds
3 threads: 41.97 seconds
4 threads: 46.52 seconds
5 threads: 55.92 seconds
6 threads: 51.63 seconds
7 threads: 62.08 seconds
8 threads: 51.36 seconds
9 threads: 62.73 seconds
10 threads: 54.92 seconds
11 threads: 62.79 seconds
12 threads: 60.16 seconds
13 threads: 51.45 seconds
14 threads: 63.01 seconds
15 threads: 58.25 seconds
16 threads: 53.10 seconds


Does adding more threads continue to speed up the program?

No, adding more threads does not consistently speed up the program. In fact, as the number of threads increases from 1 to 16, the real time varies and does not show a consistent decreasing pattern. The time can increase or remain relatively stable.

Do more threads ever slow down the program even slightly?

Yes, adding more threads can slow down the program slightly. The timings are not consistently decreasing, indicating that more threads do not guarantee faster execution and can potentially lead to increased competition for resources, slowing down the program.



QUESTION 4: Does adding more threads increase the "system load" (sys), or is it constant regardless of the number of threads?  Why?

Yes, adding more threads increases the "system load" (sys). As the number of threads increases, the system has to manage and schedule these threads, resulting in a higher system load. This is evident from the increase in system time (sys) as the number of threads increases.




BONUS
=====

QUESTION 5: Time your thread pool version of WordSearch exactly as you did for the full credit version. Post your timings here.

YOUR Timing:







QUESTION 6: Is a thread pool faster, slower, or roughly equivalent in performance? 







QUESTION 7: Compare your full credit and bonus solution code. Which do you believe is more supportable over a long lifetime of evolving hardware and environments?







EXTREME BONUS
=============

QUESTION 8: Post your final timings here. (The "race" on Antares will determine the actual winner - this just lets me know you're competing!)







